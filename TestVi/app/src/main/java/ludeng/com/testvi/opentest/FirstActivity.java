package ludeng.com.testvi.opentest;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ActivityNotFoundException;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.VpnService;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import ludeng.com.testvi.vpnspl.VpnProfile;
import ludeng.com.testvi.vpnspl.core.ProfileManager;
import ludeng.com.testvi.vpnspl.core.VPNLaunchHelper;
import ludeng.com.testvi.vpnspl.core.VpnStatus;
import ludeng.com.testvi.vpnspl.core.VpnStatus.ConnectionStatus;
import ludeng.com.testvi.vpnspl.utils.VpnUtils;
import com.example.opentest.R;
import java.io.IOException;

public class FirstActivity extends Activity implements View.OnClickListener {
    public static final String EXTRA_KEY = "de.blinkt.openvpn.shortcutProfileUUID";
    public static final String EXTRA_NAME = "de.blinkt.openvpn.shortcutProfileName";
    public static final String EXTRA_HIDELOG =  "de.blinkt.openvpn.showNoLogWindow";
    public static final String CLEARLOG = "clearlogconnect";


    private static final int START_VPN_PROFILE= 70;
    private boolean mhideLog=false;
    Button startvpn;
    Button stopvpn;
    private ludeng.com.testvi.vpnspl.VpnProfile profile;
    private boolean mCmfixed = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_first);

        initviews();

        initdatas();
    }

    private void launchVPN() {

/*choose zhengshu

  int vpnok = profile.checkProfile(this);
        if(vpnok!= R.string.no_error_found) {
            showConfigErrorDialog(vpnok);
            return;
        }*/

        Intent intent = VpnService.prepare(this);

        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
        boolean usecm9fix = prefs.getBoolean("useCM9Fix", false);
        boolean loadTunModule = prefs.getBoolean("loadTunModule", false);

        if(loadTunModule)
            execeuteSUcmd("insmod /system/lib/modules/tun.ko");

        if(usecm9fix && !mCmfixed ) {
            execeuteSUcmd("chown system /dev/tun");
        }

        if (intent != null) {
        //    VpnStatus.updateStateString("USER_VPN_PERMISSION", "", R.string.state_user_vpn_permission,
        //            VpnStatus.ConnectionStatus.LEVEL_WAITING_FOR_USER_INPUT);
            // Start the query
            try {
                startActivityForResult(intent, START_VPN_PROFILE);
            } catch (ActivityNotFoundException ane) {
                // Shame on you Sony! At least one user reported that
                // an official Sony Xperia Arc S image triggers this exception
                VpnStatus.logError(R.string.no_vpn_support_image);
               // showLogWindow();
            }
        } else {
            onActivityResult(START_VPN_PROFILE, Activity.RESULT_OK, null);
        }
    }

    private void execeuteSUcmd(String command) {
        ProcessBuilder pb = new ProcessBuilder("su","-c",command);
        try {
            Process p = pb.start();
            int ret = p.waitFor();
            if(ret ==0)
                mCmfixed=true;
        } catch (InterruptedException e) {
            VpnStatus.logException("SU command", e);

        } catch (IOException e) {
            VpnStatus.logException("SU command", e);
        }
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if(requestCode==START_VPN_PROFILE) {
            if(resultCode == Activity.RESULT_OK) {
                int needpw = profile.needUserPWInput(false);
                if(needpw !=0) {
                    VpnStatus.updateStateString("USER_VPN_PASSWORD", "", R.string.state_user_vpn_password,
                            VpnStatus.ConnectionStatus.LEVEL_WAITING_FOR_USER_INPUT);
                    VpnStatus.logError("please add password");
               //     askForPW(needpw);
                } else {
/*                    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
                    boolean showLogWindow = prefs.getBoolean("showlogwindow", true);

                    if(!mhideLog && showLogWindow)
                        showLogWindow();*/
                    new startOpenVpnThread().start();


                }
            } else if (resultCode == Activity.RESULT_CANCELED) {
                // User does not want us to start, so we just vanish
                VpnStatus.updateStateString("USER_VPN_PERMISSION_CANCELLED", "", R.string.state_user_vpn_permission_cancelled,
                        ConnectionStatus.LEVEL_NOTCONNECTED);

                finish();
            }
        }
    }


    void showConfigErrorDialog(int vpnok) {
        AlertDialog.Builder d = new AlertDialog.Builder(this);
        d.setTitle(R.string.config_error_found);
        d.setMessage(vpnok);
        d.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {
                finish();

            }
        });
        d.show();
    }

    private void initdatas() {
        addVpnProfile();
        editProfile();
        ProfileManager.getInstance(this).saveProfile(this,profile);
        ProfileManager.getInstance(this).addProfile(profile);
    }

    private void editProfile() {

        profile.mUseLzo = true;
        profile.mPKCS12Password = "";
        try {
            profile.mCaFilename = VpnUtils.getFileData(this,"a",100);

           profile.mClientCertFilename = VpnUtils.getFileData(this,"b",101);
            profile.mClientKeyFilename = VpnUtils.getFileData(this,"c",102);
        } catch (IOException e) {
            Log.i("ICABVIEW","add client wrong");
            e.printStackTrace();
        }


    }

    private void addVpnProfile() {
       profile = new VpnProfile("first"); ;
    }


    private void initviews() {
        startvpn = (Button) findViewById(R.id.startvpn);
        stopvpn  = (Button) findViewById(R.id.stopvpn);
        
        startvpn.setOnClickListener(this);
        stopvpn.setOnClickListener(this);
    }


    @Override
    public void onClick(View v) {
            switch (v.getId()) {
                case R.id.startvpn:
                    startvpn();
                break;
            case R.id.stopvpn:
                    stopvpn();
                break;
        }
    }

    private void stopvpn() {
        Intent disconnectVPN = new Intent(this, DisconnectVPN.class);
        startActivity(disconnectVPN);;
    }

    private void startvpn() {
        launchVPN();
    }


    private class startOpenVpnThread extends Thread {

        @Override
        public void run() {
           Log.i("ICABVIEW",""
                  // +"mName is "+profile.mName									+"\n"
                  //   +"profileDeleted is "+(profile.profileDeleted==false)		+"\n"
                 //   +"mAlias " +profile.mAlias 								+"\n"
                //    		+"mClientCertFilename  "+profile.mClientCertFilename		+"\n"
/*                     //		+"mTLSAuthDirection  "	+profile.mTLSAuthDirection			+"\n"
                    //		+"mTLSAuthFilename  "	+profile.mTLSAuthFilename 			+"\n"
                    //		+"mClientKeyFilename    "+profile.mClientKeyFilename		+"\n"
                    //		+"mCaFilename  "		+profile.mCaFilename				+"\n"
                   +"mUseLzo   "		    +(profile.mUseLzo ==true)			+"\n"
                    +"mPKCS12Filename  "	+profile.mPKCS12Filename			+"\n"
                    +"mPKCS12Password    "  +(profile.mPKCS12Password)           +"\n"
                    +"mUseTLSAuth   "		+(profile.mUseTLSAuth ==false)		+"\n"
                    +"mDNS1    "			+profile.mDNS1						+"\n"
                    +"mDNS2    "			+profile.mDNS2						+"\n"
                    +"mIPv4Address   "		+profile.mIPv4Address				+"\n"
                    +"mIPv6Address   "		+profile.mIPv6Address				+"\n"
                    +"mOverrideDNS   "		+(profile.mOverrideDNS ==false)   	+"\n"
                    +"mSearchDomain   "		+profile.mSearchDomain				+"\n"
                    +"mUseDefaultRoute   "	+(profile.mUseDefaultRoute ==true)   +"\n"
                    +"mUsePull   "			+(profile.mUsePull==true)			+"\n"
                    +"mCustomRoutes	"		+profile.mCustomRoutes				+"\n"
                    +"mCheckRemoteCN	"	+(profile.mCheckRemoteCN==true)		+"\n"
                    +"mExpectTLSCert	"	+(profile.mExpectTLSCert==false)		+"\n"
                    +"mRemoteCN		"		+profile.mRemoteCN					+"\n"
                    +"mPassword		"		+profile.mPassword					+"\n"
                    +"mUsername		"		+profile.mUsername					+"\n"
                    +"mRoutenopull		"	+(profile.mRoutenopull==false)		+"\n"
                    +"mUseRandomHostname	"+(profile.mUseRandomHostname==false)+"\n"
                    +"mUseFloat"			+(profile.mUseFloat==false)			+"\n"
                    +"mUseCustomConfig	"	+(profile.mUseCustomConfig==false)	+"\n"
                    +"mCustomConfigOptions	"+profile.mCustomConfigOptions		+"\n"
                    +"mVerb	"				+profile.mVerb						+"\n"
                    +"mCipher	"			+profile.mCipher					+"\n"
                    +"mNobind	"			+(profile.mNobind==false)			+"\n"
                    +"mUseDefaultRoutev6	"+(profile.mUseDefaultRoutev6==true)	+"\n"
                    +"mCustomRoutesv6	"	+profile.mCustomRoutesv6			+"\n"
                    +"mKeyPassword	"		+profile.mKeyPassword				+"\n"
                    +"mPersistTun	"		+(profile.mPersistTun==false)		+"\n"
                    +"mConnectRetryMax	"	+profile.mConnectRetryMax			+"\n"
                    +"mConnectRetry	"		+profile.mConnectRetry				+"\n"
                    +"mUserEditable	"		+(profile.mUserEditable==true)		+"\n"
                    +"mAuth	"				+profile.mAuth						+"\n"
                    +"mX509AuthType	"		+profile.mX509AuthType 			+"\n"
                    //	+"mPrivateKey	"		+profile.mPrivateKey				+"\n"
                    //	+"mUuid	"				+profile.mUuid						+"\n"
                    +"mAllowLocalLAN	"	+(profile.mAllowLocalLAN==false)	+"\n"
                    //    +"mProfileVersion	"	+profile.mProfileVersion          		+"\n"
                    +"mExcludedRoutes	"	+profile.mExcludedRoutes			+"\n"
                    +"mExcludedRoutesv6	"	+profile.mExcludedRoutesv6			+"\n"
                    +"mMssFix	"			+profile.mMssFix					+"\n"
                    +"mConnections	"		+profile.mConnections.length	+"\n"
                    +"mConnections	"		+profile.mConnections[0].mServerName	+"\n"
                    +"mRemoteRandom	"		+(profile.mRemoteRandom==false)		+"\n"
                    +"mAllowedAppsVpnAreDisallowed	"+(profile.mAllowedAppsVpnAreDisallowed==true) 	+"\n"
                    +"mProfileCreator	"	+profile.mProfileCreator 			+"\n"
                    +"mServerName	"		+profile.mServerName				+"\n"
                    +"mServerPort	"		+profile.mServerPort				+"\n"
                    +"mUseUdp	"			+(profile.mUseUdp==true)				+"\n"
                    +"mPushPeerInfo	"		+(profile.mPushPeerInfo==false)		+"\n"
*/
            );

            VPNLaunchHelper.startOpenVpn(profile, getBaseContext());
          //  finish();
        }

    }
}
